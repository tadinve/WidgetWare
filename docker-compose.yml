version: '2.1'
services:

######################################################
# DATABASE SERVICE
######################################################
  postgres:
    build: './docker/postgres'
    restart: always
    #container_name: postgres
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32769:5432"
    #volumes:
      #- ./mnt/postgres:/var/lib/postgresql/data/pgdata
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow_db
      #- PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "airflow_db", "-U", "airflow" ]
      timeout: 45s
      interval: 10s
      retries: 10

  postgres-dbt:
    image: postgres:13
    environment:
      POSTGRES_PASSWORD: pssd
      POSTGRES_USER : dbtuser
      POSTGRES_DB : dbtdb
      DBT_SCHEMA: dbt
      DBT_RAW_DATA_SCHEMA: dbt_raw_data
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - postgres-dbt-volume:/var/lib/postgresql/data    
      
  adminer:
    image: wodby/adminer:latest
    restart: always
    container_name: adminer
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32767:9000"
    environment:
      - ADMINER_DEFAULT_DB_DRIVER=psql
      - ADMINER_DEFAULT_DB_HOST=postgres
      - ADMINER_DEFAULT_DB_NAME=airflow_db
    healthcheck:
      test: [ "CMD", "nc", "-z", "adminer", "9000" ]
      timeout: 45s
      interval: 10s
      retries: 10

######################################################
# HADOOP SERVICES
######################################################
  namenode:
    build: ./docker/hadoop/hadoop-namenode
    restart: always
    container_name: namenode
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32763:9870"
    volumes:
      - ./mnt/hadoop/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=hadoop_cluster
      - DOCKER_BUILDKIT=0
      - COMPOSE_DOCKER_CLI_BUILD=0
    healthcheck:
      test: [ "CMD", "nc", "-z", "namenode", "9870" ]
      timeout: 45s
      interval: 10s
      retries: 10

  datanode:
    build: ./docker/hadoop/hadoop-datanode
    restart: always
    container_name: datanode
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - namenode
    volumes:
      - ./mnt/hadoop/datanode:/hadoop/dfs/data
    environment:
      - SERVICE_PRECONDITION=namenode:9870
    healthcheck:
      test: [ "CMD", "nc", "-z", "datanode", "9864" ]
      timeout: 45s
      interval: 10s
      retries: 10

  hive-metastore:
    build: ./docker/hive/hive-metastore
    restart: always
    container_name: hive-metastore
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - namenode
      - datanode
      - postgres
    environment:
      - SERVICE_PRECONDITION=namenode:9870 datanode:9864 postgres:5432
      - DOCKER_BUILDKIT=0
      - COMPOSE_DOCKER_CLI_BUILD=0
    ports:
      - "32761:9083"
    healthcheck:
      test: [ "CMD", "nc", "-z", "hive-metastore", "9083" ]
      timeout: 45s
      interval: 10s
      retries: 10

  hive-server:
    build: ./docker/hive/hive-server
    restart: always
    container_name: hive-server
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - hive-metastore
    environment:
      - SERVICE_PRECONDITION=hive-metastore:9083
      - DOCKER_BUILDKIT=0
      - COMPOSE_DOCKER_CLI_BUILD=0
    ports:
      - "32760:10000"
      - "32759:10002"
    healthcheck:
      test: [ "CMD", "nc", "-z", "hive-server", "10002" ]
      timeout: 45s
      interval: 10s
      retries: 10

  hive-webhcat:
    build: ./docker/hive/hive-webhcat
    restart: always
    container_name: hive-webhcat
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - hive-server
    environment:
      - SERVICE_PRECONDITION=hive-server:10000
      - DOCKER_BUILDKIT=0
      - COMPOSE_DOCKER_CLI_BUILD=0
    healthcheck:
      test: [ "CMD", "nc", "-z", "hive-webhcat", "50111" ]
      timeout: 45s
      interval: 10s
      retries: 10

  hue:
    build: ./docker/hue
    restart: always
    container_name: hue
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - hive-server
      - postgres
    ports:
      - "32762:8888"
    volumes:
      - ./mnt/hue/hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
    environment:
      - SERVICE_PRECONDITION=hive-server:10000 postgres:5432
    healthcheck:
      test: [ "CMD", "nc", "-z", "hue", "8888" ]
      timeout: 45s
      interval: 10s
      retries: 10

######################################################
# SPARK SERVICES
######################################################
  spark-master:
    build: ./docker/spark/spark-master
    restart: always
    container_name: spark-master
    environment:
      - DOCKER_BUILDKIT=0
      - COMPOSE_DOCKER_CLI_BUILD=0
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32766:8082"
      - "32765:7077"
    volumes:
      - ./mnt/spark/apps:/opt/spark-apps
      - ./mnt/spark/data:/opt/spark-data
    healthcheck:
      test: [ "CMD", "nc", "-z", "spark-master", "8082" ]
      timeout: 45s
      interval: 10s
      retries: 10

  spark-worker:
    build: ./docker/spark/spark-worker
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - spark-master
    ports:
      - "32764:8081"
    volumes:
      - ./mnt/spark/apps:/opt/spark-apps
      - ./mnt/spark/data:/opt/spark-data
    environment:
      - DOCKER_BUILDKIT=0
      - COMPOSE_DOCKER_CLI_BUILD=0
    healthcheck:
      test: [ "CMD", "nc", "-z", "spark-worker", "8081" ]
      timeout: 45s
      interval: 10s
      retries: 10

  livy:
    build: ./docker/livy
    restart: always
    container_name: livy
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - spark-worker
    ports:
      - "32758:8998"
    environment:
      - SPARK_MASTER_ENDPOINT=spark-master
      - SPARK_MASTER_PORT=7077
      - DEPLOY_MODE=client
    healthcheck:
      test: [ "CMD", "nc", "-z", "livy", "8998" ]
      timeout: 45s
      interval: 10s
      retries: 10

######################################################
# AIRFLOW
######################################################

  airflow:
    build: ./docker/airflow
    restart: always
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow_db
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DBT_PROFILES_DIR=/dbt
      - DBT_POSTGRES_PASSWORD=pssd
      - DBT_POSTGRES_USER=dbtuser
      - DBT_POSTGRES_DB=dbtdb
      - DBT_DBT_SCHEMA=dbt
      - DBT_DBT_RAW_DATA_SCHEMA=dbt_raw_data
      - DBT_POSTGRES_HOST=postgres-dbt
      - DOCKER_BUILDKIT=0
      - COMPOSE_DOCKER_CLI_BUILD=0
    container_name: airflow
    volumes:
      - ./mnt/dbt:/dbt
      - ./mnt/great_expectations:/great_expectations
      - ./mnt/include:/include
      - ./mnt/airflow/airflow.cfg:/opt/airflow/airflow.cfg
      - ./mnt/airflow/dags:/opt/airflow/dags  
      - ./mnt/airflow/logs:/opt/airflow/logs
      - ./mnt/airflow/plugins:/opt/airflow/plugins
      - ./mnt/scripts:/opt/airflow/scripts

      
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "nc", "-z", "airflow", "8080" ]
      timeout: 45s
      interval: 10s
      retries: 10

######################################################
##################### SUPERSET #######################
######################################################

  ss-redis:
    image: redis
    restart: always
    volumes:
      - ss_redis:/data
  ss-mysql:
    command: --character-set-server=utf8mb4 --collati   on-server=utf8mb4_unicode_ci
    image: mysql:5
    restart: always
    environment:
      MYSQL_DATABASE: superset
      MYSQL_PASSWORD: superset
      MYSQL_ROOT_PASSWORD: superset
      MYSQL_USER: superset
    ports:
      - "3306:3306"
    volumes:
      - ss_mysql:/var/lib/mysql
  ss-postgres_db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - ./ss_postgres_db:/var/lib/postgresql/data
  ss-superset:
    image: amancevice/superset
    restart: always
    depends_on:
      - ss-mysql
      - ss-redis
    environment:
      MAPBOX_API_KEY: ${MAPBOX_API_KEY}
    ports:
      - "8088:8088"
    volumes:
      - /volumes/config/:/etc/superset/superset_config.py
      - /volumes/superset_data/:/home/superset/ 

  # openssh-client:
  #   image: entechlog/openssh-client
  #   container_name: openssh-client
  #   build: ./docker/openssh-client/
  #   depends_on:
  #     - apache-superset
  #   restart: unless-stopped
  #   tty: true
  #   volumes:
  #     - //var/run/docker.sock:/var/run/docker.sock:rw
  #     - ./docker/superset/initialize-superset.sh:/usr/src/scripts/initialize-superset.sh
  #   command: 
  #     # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
  #     - bash 
  #     - -c 
  #     - |
  #       sleep 30
  #       /usr/src/scripts/initialize-superset.sh
  #       sleep 10
######################################################
# NETWORK
######################################################

# Change name of default network otherwise URI invalid for HIVE
# because of the _ contained by default network
networks:
  default:
    name: airflow-network


volumes:
  postgres-db-volume:
    driver: local
  postgres-dbt-volume:
    driver: local
  ss_mysql:
  ss_redis:
  ss_postgres_db:
  config: